<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Azelis Shipping - Tender Input</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css" rel="stylesheet">
    <!-- Firebase -->
    <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-firestore-compat.js"></script>
    <!-- React and Babel -->
    <script src="https://unpkg.com/react@17/umd/react.production.min.js" crossorigin></script>
    <script src="https://unpkg.com/react-dom@17/umd/react-dom.production.min.js" crossorigin></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <style>
        .azelis-blue { background-color: #003087; }
        .azelis-blue-hover:hover { background-color: #002670; }
    </style>
</head>
<body class="bg-gray-50">
    <header class="azelis-blue text-white p-4 shadow-lg">
        <div class="max-w-7xl mx-auto flex justify-between items-center">
            <div class="flex items-center space-x-4">
                <img src="https://www.azelis.com/themes/custom/azelis_theme/logo.svg" alt="Azelis Logo" class="h-8">
                <h1 class="text-xl font-bold">Quote Submission</h1>
            </div>
        </div>
    </header>

    <div id="root"></div>

    <script>
        const firebaseConfig = {
            apiKey: "YOUR_API_KEY",
            authDomain: "azelislogistics.firebaseapp.com",
            projectId: "azelislogistics",
            storageBucket: "azelislogistics.appspot.com",
            messagingSenderId: "13102382958",
            appId: "1:13102382958:web:82a3324843432519cb8b7f",
            measurementId: "G-Q6JNN8DHJQ"
        };
        firebase.initializeApp(firebaseConfig);
        const db = firebase.firestore();
    </script>

    <script type="text/babel">
        const TenderForm = () => {
            const [loading, setLoading] = React.useState(true);
            const [quote, setQuote] = React.useState(null);
            const [submitting, setSubmitting] = React.useState(false);
            const [error, setError] = React.useState(null);

            React.useEffect(() => {
                // Get quote ID from URL parameters
                const params = new URLSearchParams(window.location.search);
                const quoteId = params.get('id');

                if (!quoteId) {
                    setError('Invalid quote ID');
                    setLoading(false);
                    return;
                }

                // Fetch quote details from Firestore
                db.collection('quotes').doc(quoteId).get()
                    .then(doc => {
                        if (doc.exists) {
                            setQuote(doc.data());
                        } else {
                            setError('Quote not found');
                        }
                        setLoading(false);
                    })
                    .catch(err => {
                        setError('Error loading quote details');
                        setLoading(false);
                    });
            }, []);

            const handleSubmit = async (e) => {
                e.preventDefault();
                setSubmitting(true);
                setError(null);

                const formData = new FormData(e.target);
                const quoteResponse = {
                    price: parseFloat(formData.get('price')),
                    currency: formData.get('currency'),
                    validUntil: formData.get('validUntil'),
                    notes: formData.get('notes'),
                    submittedAt: new Date(),
                    haulierId: quote.haulierId
                };

                try {
                    await db.collection('quotes').doc(quote.id).update({
                        response: quoteResponse,
                        status: 'responded'
                    });

                    // Send notification email to user
                    // This would typically be handled by a backend service
                    alert('Quote submitted successfully!');
                    window.location.href = '/quote-submitted.html';
                } catch (err) {
                    setError('Failed to submit quote. Please try again.');
                    setSubmitting(false);
                }
            };

            if (loading) {
                return (
                    <div className="flex items-center justify-center h-64">
                        <div className="text-lg">Loading...</div>
                    </div>
                );
            }

            if (error) {
                return (
                    <div className="max-w-2xl mx-auto p-4">
                        <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                            <div className="text-red-700">{error}</div>
                        </div>
                    </div>
                );
            }

            return (
                <div className="max-w-2xl mx-auto p-4">
                    <div className="bg-white rounded-lg shadow-lg p-6">
                        <h2 className="text-xl font-bold mb-6">Quote Details</h2>
                        
                        <div className="mb-6">
                            <div className="grid grid-cols-2 gap-4">
                                <div>
                                    <h3 className="font-medium text-gray-700">Collection</h3>
                                    <p className="text-gray-600">{quote.collection.country}</p>
                                    <p className="text-gray-600">{quote.collection.postcode}</p>
                                    {quote.collection.location && (
                                        <p className="text-gray-600">{quote.collection.location}</p>
                                    )}
                                </div>
                                <div>
                                    <h3 className="font-medium text-gray-700">Delivery</h3>
                                    <p className="text-gray-600">{quote.delivery.country}</p>
                                    <p className="text-gray-600">{quote.delivery.postcode}</p>
                                    {quote.delivery.location && (
                                        <p className="text-gray-600">{quote.delivery.location}</p>
                                    )}
                                </div>
                            </div>
                        </div>

                        <form onSubmit={handleSubmit} className="space-y-4">
                            <div>
                                <label className="block text-sm font-medium mb-1">Price *</label>
                                <div className="grid grid-cols-2 gap-4">
                                    <input
                                        name="price"
                                        type="number"
                                        step="0.01"
                                        required
                                        className="w-full p-2 border rounded"
                                    />
                                    <select
                                        name="currency"
                                        required
                                        className="w-full p-2 border rounded"
                                    >
                                        <option value="GBP">GBP (£)</option>
                                        <option value="EUR">EUR (€)</option>
                                        <option value="USD">USD ($)</option>
                                    </select>
                                </div>
                            </div>

                            <div>
                                <label className="block text-sm font-medium mb-1">Valid Until *</label>
                                <input
                                    name="validUntil"
                                    type="date"
                                    required
                                    className="w-full p-2 border rounded"
                                />
                            </div>

                            <div>
                                <label className="block text-sm font-medium mb-1">Additional Notes</label>
                                <textarea
                                    name="notes"
                                    rows="4"
                                    className="w-full p-2 border rounded"
                                    placeholder="Enter any additional information or terms..."
                                ></textarea>
                            </div>

                            <button
                                type="submit"
                                disabled={submitting}
                                className="w-full azelis-blue text-white p-3 rounded-lg font-medium hover:bg-blue-700 
                                         transition-colors disabled:opacity-50"
                            >
                                {submitting ? "Submitting..." : "Submit Quote"}
                            </button>
                        </form>
                    </div>
                </div>
            );
        };

        ReactDOM.render(<TenderForm />, document.getElementById('root'));
    </script>
</body>
</html>
